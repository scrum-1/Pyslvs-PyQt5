# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_slvs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_slvs')
    _slvs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_slvs', [dirname(__file__)])
        except ImportError:
            import _slvs
            return _slvs
        try:
            _mod = imp.load_module('_slvs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _slvs = swig_import_helper()
    del swig_import_helper
else:
    import _slvs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SLVS_FREE_IN_3D = _slvs.SLVS_FREE_IN_3D
class Slvs_Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slvs_Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slvs_Param, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.Slvs_Param_h_set
    __swig_getmethods__["h"] = _slvs.Slvs_Param_h_get
    if _newclass:
        h = _swig_property(_slvs.Slvs_Param_h_get, _slvs.Slvs_Param_h_set)
    __swig_setmethods__["group"] = _slvs.Slvs_Param_group_set
    __swig_getmethods__["group"] = _slvs.Slvs_Param_group_get
    if _newclass:
        group = _swig_property(_slvs.Slvs_Param_group_get, _slvs.Slvs_Param_group_set)
    __swig_setmethods__["val"] = _slvs.Slvs_Param_val_set
    __swig_getmethods__["val"] = _slvs.Slvs_Param_val_get
    if _newclass:
        val = _swig_property(_slvs.Slvs_Param_val_get, _slvs.Slvs_Param_val_set)

    def __init__(self):
        this = _slvs.new_Slvs_Param()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_Slvs_Param
    __del__ = lambda self: None
Slvs_Param_swigregister = _slvs.Slvs_Param_swigregister
Slvs_Param_swigregister(Slvs_Param)

SLVS_E_POINT_IN_3D = _slvs.SLVS_E_POINT_IN_3D
SLVS_E_POINT_IN_2D = _slvs.SLVS_E_POINT_IN_2D
SLVS_E_NORMAL_IN_3D = _slvs.SLVS_E_NORMAL_IN_3D
SLVS_E_NORMAL_IN_2D = _slvs.SLVS_E_NORMAL_IN_2D
SLVS_E_DISTANCE = _slvs.SLVS_E_DISTANCE
SLVS_E_WORKPLANE = _slvs.SLVS_E_WORKPLANE
SLVS_E_LINE_SEGMENT = _slvs.SLVS_E_LINE_SEGMENT
SLVS_E_CUBIC = _slvs.SLVS_E_CUBIC
SLVS_E_CIRCLE = _slvs.SLVS_E_CIRCLE
SLVS_E_ARC_OF_CIRCLE = _slvs.SLVS_E_ARC_OF_CIRCLE
class Slvs_Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slvs_Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slvs_Entity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.Slvs_Entity_h_set
    __swig_getmethods__["h"] = _slvs.Slvs_Entity_h_get
    if _newclass:
        h = _swig_property(_slvs.Slvs_Entity_h_get, _slvs.Slvs_Entity_h_set)
    __swig_setmethods__["group"] = _slvs.Slvs_Entity_group_set
    __swig_getmethods__["group"] = _slvs.Slvs_Entity_group_get
    if _newclass:
        group = _swig_property(_slvs.Slvs_Entity_group_get, _slvs.Slvs_Entity_group_set)
    __swig_setmethods__["type"] = _slvs.Slvs_Entity_type_set
    __swig_getmethods__["type"] = _slvs.Slvs_Entity_type_get
    if _newclass:
        type = _swig_property(_slvs.Slvs_Entity_type_get, _slvs.Slvs_Entity_type_set)
    __swig_setmethods__["wrkpl"] = _slvs.Slvs_Entity_wrkpl_set
    __swig_getmethods__["wrkpl"] = _slvs.Slvs_Entity_wrkpl_get
    if _newclass:
        wrkpl = _swig_property(_slvs.Slvs_Entity_wrkpl_get, _slvs.Slvs_Entity_wrkpl_set)
    __swig_setmethods__["point"] = _slvs.Slvs_Entity_point_set
    __swig_getmethods__["point"] = _slvs.Slvs_Entity_point_get
    if _newclass:
        point = _swig_property(_slvs.Slvs_Entity_point_get, _slvs.Slvs_Entity_point_set)
    __swig_setmethods__["normal"] = _slvs.Slvs_Entity_normal_set
    __swig_getmethods__["normal"] = _slvs.Slvs_Entity_normal_get
    if _newclass:
        normal = _swig_property(_slvs.Slvs_Entity_normal_get, _slvs.Slvs_Entity_normal_set)
    __swig_setmethods__["distance"] = _slvs.Slvs_Entity_distance_set
    __swig_getmethods__["distance"] = _slvs.Slvs_Entity_distance_get
    if _newclass:
        distance = _swig_property(_slvs.Slvs_Entity_distance_get, _slvs.Slvs_Entity_distance_set)

    def __init__(self):
        this = _slvs.new_Slvs_Entity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_Slvs_Entity
    __del__ = lambda self: None
Slvs_Entity_swigregister = _slvs.Slvs_Entity_swigregister
Slvs_Entity_swigregister(Slvs_Entity)

SLVS_C_POINTS_COINCIDENT = _slvs.SLVS_C_POINTS_COINCIDENT
SLVS_C_PT_PT_DISTANCE = _slvs.SLVS_C_PT_PT_DISTANCE
SLVS_C_PT_PLANE_DISTANCE = _slvs.SLVS_C_PT_PLANE_DISTANCE
SLVS_C_PT_LINE_DISTANCE = _slvs.SLVS_C_PT_LINE_DISTANCE
SLVS_C_PT_FACE_DISTANCE = _slvs.SLVS_C_PT_FACE_DISTANCE
SLVS_C_PT_IN_PLANE = _slvs.SLVS_C_PT_IN_PLANE
SLVS_C_PT_ON_LINE = _slvs.SLVS_C_PT_ON_LINE
SLVS_C_PT_ON_FACE = _slvs.SLVS_C_PT_ON_FACE
SLVS_C_EQUAL_LENGTH_LINES = _slvs.SLVS_C_EQUAL_LENGTH_LINES
SLVS_C_LENGTH_RATIO = _slvs.SLVS_C_LENGTH_RATIO
SLVS_C_EQ_LEN_PT_LINE_D = _slvs.SLVS_C_EQ_LEN_PT_LINE_D
SLVS_C_EQ_PT_LN_DISTANCES = _slvs.SLVS_C_EQ_PT_LN_DISTANCES
SLVS_C_EQUAL_ANGLE = _slvs.SLVS_C_EQUAL_ANGLE
SLVS_C_EQUAL_LINE_ARC_LEN = _slvs.SLVS_C_EQUAL_LINE_ARC_LEN
SLVS_C_SYMMETRIC = _slvs.SLVS_C_SYMMETRIC
SLVS_C_SYMMETRIC_HORIZ = _slvs.SLVS_C_SYMMETRIC_HORIZ
SLVS_C_SYMMETRIC_VERT = _slvs.SLVS_C_SYMMETRIC_VERT
SLVS_C_SYMMETRIC_LINE = _slvs.SLVS_C_SYMMETRIC_LINE
SLVS_C_AT_MIDPOINT = _slvs.SLVS_C_AT_MIDPOINT
SLVS_C_HORIZONTAL = _slvs.SLVS_C_HORIZONTAL
SLVS_C_VERTICAL = _slvs.SLVS_C_VERTICAL
SLVS_C_DIAMETER = _slvs.SLVS_C_DIAMETER
SLVS_C_PT_ON_CIRCLE = _slvs.SLVS_C_PT_ON_CIRCLE
SLVS_C_SAME_ORIENTATION = _slvs.SLVS_C_SAME_ORIENTATION
SLVS_C_ANGLE = _slvs.SLVS_C_ANGLE
SLVS_C_PARALLEL = _slvs.SLVS_C_PARALLEL
SLVS_C_PERPENDICULAR = _slvs.SLVS_C_PERPENDICULAR
SLVS_C_ARC_LINE_TANGENT = _slvs.SLVS_C_ARC_LINE_TANGENT
SLVS_C_CUBIC_LINE_TANGENT = _slvs.SLVS_C_CUBIC_LINE_TANGENT
SLVS_C_EQUAL_RADIUS = _slvs.SLVS_C_EQUAL_RADIUS
SLVS_C_PROJ_PT_DISTANCE = _slvs.SLVS_C_PROJ_PT_DISTANCE
SLVS_C_WHERE_DRAGGED = _slvs.SLVS_C_WHERE_DRAGGED
SLVS_C_CURVE_CURVE_TANGENT = _slvs.SLVS_C_CURVE_CURVE_TANGENT
class Slvs_Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slvs_Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slvs_Constraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _slvs.Slvs_Constraint_h_set
    __swig_getmethods__["h"] = _slvs.Slvs_Constraint_h_get
    if _newclass:
        h = _swig_property(_slvs.Slvs_Constraint_h_get, _slvs.Slvs_Constraint_h_set)
    __swig_setmethods__["group"] = _slvs.Slvs_Constraint_group_set
    __swig_getmethods__["group"] = _slvs.Slvs_Constraint_group_get
    if _newclass:
        group = _swig_property(_slvs.Slvs_Constraint_group_get, _slvs.Slvs_Constraint_group_set)
    __swig_setmethods__["type"] = _slvs.Slvs_Constraint_type_set
    __swig_getmethods__["type"] = _slvs.Slvs_Constraint_type_get
    if _newclass:
        type = _swig_property(_slvs.Slvs_Constraint_type_get, _slvs.Slvs_Constraint_type_set)
    __swig_setmethods__["wrkpl"] = _slvs.Slvs_Constraint_wrkpl_set
    __swig_getmethods__["wrkpl"] = _slvs.Slvs_Constraint_wrkpl_get
    if _newclass:
        wrkpl = _swig_property(_slvs.Slvs_Constraint_wrkpl_get, _slvs.Slvs_Constraint_wrkpl_set)
    __swig_setmethods__["valA"] = _slvs.Slvs_Constraint_valA_set
    __swig_getmethods__["valA"] = _slvs.Slvs_Constraint_valA_get
    if _newclass:
        valA = _swig_property(_slvs.Slvs_Constraint_valA_get, _slvs.Slvs_Constraint_valA_set)
    __swig_setmethods__["ptA"] = _slvs.Slvs_Constraint_ptA_set
    __swig_getmethods__["ptA"] = _slvs.Slvs_Constraint_ptA_get
    if _newclass:
        ptA = _swig_property(_slvs.Slvs_Constraint_ptA_get, _slvs.Slvs_Constraint_ptA_set)
    __swig_setmethods__["ptB"] = _slvs.Slvs_Constraint_ptB_set
    __swig_getmethods__["ptB"] = _slvs.Slvs_Constraint_ptB_get
    if _newclass:
        ptB = _swig_property(_slvs.Slvs_Constraint_ptB_get, _slvs.Slvs_Constraint_ptB_set)
    __swig_setmethods__["entityA"] = _slvs.Slvs_Constraint_entityA_set
    __swig_getmethods__["entityA"] = _slvs.Slvs_Constraint_entityA_get
    if _newclass:
        entityA = _swig_property(_slvs.Slvs_Constraint_entityA_get, _slvs.Slvs_Constraint_entityA_set)
    __swig_setmethods__["entityB"] = _slvs.Slvs_Constraint_entityB_set
    __swig_getmethods__["entityB"] = _slvs.Slvs_Constraint_entityB_get
    if _newclass:
        entityB = _swig_property(_slvs.Slvs_Constraint_entityB_get, _slvs.Slvs_Constraint_entityB_set)
    __swig_setmethods__["entityC"] = _slvs.Slvs_Constraint_entityC_set
    __swig_getmethods__["entityC"] = _slvs.Slvs_Constraint_entityC_get
    if _newclass:
        entityC = _swig_property(_slvs.Slvs_Constraint_entityC_get, _slvs.Slvs_Constraint_entityC_set)
    __swig_setmethods__["entityD"] = _slvs.Slvs_Constraint_entityD_set
    __swig_getmethods__["entityD"] = _slvs.Slvs_Constraint_entityD_get
    if _newclass:
        entityD = _swig_property(_slvs.Slvs_Constraint_entityD_get, _slvs.Slvs_Constraint_entityD_set)
    __swig_setmethods__["other"] = _slvs.Slvs_Constraint_other_set
    __swig_getmethods__["other"] = _slvs.Slvs_Constraint_other_get
    if _newclass:
        other = _swig_property(_slvs.Slvs_Constraint_other_get, _slvs.Slvs_Constraint_other_set)
    __swig_setmethods__["other2"] = _slvs.Slvs_Constraint_other2_set
    __swig_getmethods__["other2"] = _slvs.Slvs_Constraint_other2_get
    if _newclass:
        other2 = _swig_property(_slvs.Slvs_Constraint_other2_get, _slvs.Slvs_Constraint_other2_set)

    def __init__(self):
        this = _slvs.new_Slvs_Constraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_Slvs_Constraint
    __del__ = lambda self: None
Slvs_Constraint_swigregister = _slvs.Slvs_Constraint_swigregister
Slvs_Constraint_swigregister(Slvs_Constraint)

class Slvs_System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slvs_System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slvs_System, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _slvs.Slvs_System_params_set
    __swig_getmethods__["params"] = _slvs.Slvs_System_params_get
    if _newclass:
        params = _swig_property(_slvs.Slvs_System_params_get, _slvs.Slvs_System_params_set)
    __swig_setmethods__["entity"] = _slvs.Slvs_System_entity_set
    __swig_getmethods__["entity"] = _slvs.Slvs_System_entity_get
    if _newclass:
        entity = _swig_property(_slvs.Slvs_System_entity_get, _slvs.Slvs_System_entity_set)
    __swig_setmethods__["entities"] = _slvs.Slvs_System_entities_set
    __swig_getmethods__["entities"] = _slvs.Slvs_System_entities_get
    if _newclass:
        entities = _swig_property(_slvs.Slvs_System_entities_get, _slvs.Slvs_System_entities_set)
    __swig_setmethods__["constraint"] = _slvs.Slvs_System_constraint_set
    __swig_getmethods__["constraint"] = _slvs.Slvs_System_constraint_get
    if _newclass:
        constraint = _swig_property(_slvs.Slvs_System_constraint_get, _slvs.Slvs_System_constraint_set)
    __swig_setmethods__["constraints"] = _slvs.Slvs_System_constraints_set
    __swig_getmethods__["constraints"] = _slvs.Slvs_System_constraints_get
    if _newclass:
        constraints = _swig_property(_slvs.Slvs_System_constraints_get, _slvs.Slvs_System_constraints_set)
    __swig_setmethods__["dragged"] = _slvs.Slvs_System_dragged_set
    __swig_getmethods__["dragged"] = _slvs.Slvs_System_dragged_get
    if _newclass:
        dragged = _swig_property(_slvs.Slvs_System_dragged_get, _slvs.Slvs_System_dragged_set)
    __swig_setmethods__["calculateFaileds"] = _slvs.Slvs_System_calculateFaileds_set
    __swig_getmethods__["calculateFaileds"] = _slvs.Slvs_System_calculateFaileds_get
    if _newclass:
        calculateFaileds = _swig_property(_slvs.Slvs_System_calculateFaileds_get, _slvs.Slvs_System_calculateFaileds_set)
    __swig_setmethods__["failed"] = _slvs.Slvs_System_failed_set
    __swig_getmethods__["failed"] = _slvs.Slvs_System_failed_get
    if _newclass:
        failed = _swig_property(_slvs.Slvs_System_failed_get, _slvs.Slvs_System_failed_set)
    __swig_setmethods__["faileds"] = _slvs.Slvs_System_faileds_set
    __swig_getmethods__["faileds"] = _slvs.Slvs_System_faileds_get
    if _newclass:
        faileds = _swig_property(_slvs.Slvs_System_faileds_get, _slvs.Slvs_System_faileds_set)
    __swig_setmethods__["dof"] = _slvs.Slvs_System_dof_set
    __swig_getmethods__["dof"] = _slvs.Slvs_System_dof_get
    if _newclass:
        dof = _swig_property(_slvs.Slvs_System_dof_get, _slvs.Slvs_System_dof_set)
    __swig_setmethods__["result"] = _slvs.Slvs_System_result_set
    __swig_getmethods__["result"] = _slvs.Slvs_System_result_get
    if _newclass:
        result = _swig_property(_slvs.Slvs_System_result_get, _slvs.Slvs_System_result_set)

    def __init__(self):
        this = _slvs.new_Slvs_System()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_Slvs_System
    __del__ = lambda self: None
Slvs_System_swigregister = _slvs.Slvs_System_swigregister
Slvs_System_swigregister(Slvs_System)
SLVS_RESULT_OKAY = _slvs.SLVS_RESULT_OKAY
SLVS_RESULT_INCONSISTENT = _slvs.SLVS_RESULT_INCONSISTENT
SLVS_RESULT_DIDNT_CONVERGE = _slvs.SLVS_RESULT_DIDNT_CONVERGE
SLVS_RESULT_TOO_MANY_UNKNOWNS = _slvs.SLVS_RESULT_TOO_MANY_UNKNOWNS


def Slvs_Solve(sys: 'Slvs_System', hg: 'Slvs_hGroup') -> "void":
    return _slvs.Slvs_Solve(sys, hg)
Slvs_Solve = _slvs.Slvs_Solve

def Slvs_QuaternionU(qw: 'double', qx: 'double', qy: 'double', qz: 'double') -> "double *, double *, double *":
    return _slvs.Slvs_QuaternionU(qw, qx, qy, qz)
Slvs_QuaternionU = _slvs.Slvs_QuaternionU

def Slvs_QuaternionV(qw: 'double', qx: 'double', qy: 'double', qz: 'double') -> "double *, double *, double *":
    return _slvs.Slvs_QuaternionV(qw, qx, qy, qz)
Slvs_QuaternionV = _slvs.Slvs_QuaternionV

def Slvs_QuaternionN(qw: 'double', qx: 'double', qy: 'double', qz: 'double') -> "double *, double *, double *":
    return _slvs.Slvs_QuaternionN(qw, qx, qy, qz)
Slvs_QuaternionN = _slvs.Slvs_QuaternionN

def Slvs_MakeQuaternion(ux: 'double', uy: 'double', uz: 'double', vx: 'double', vy: 'double', vz: 'double') -> "double *, double *, double *, double *":
    return _slvs.Slvs_MakeQuaternion(ux, uy, uz, vx, vy, vz)
Slvs_MakeQuaternion = _slvs.Slvs_MakeQuaternion

def Slvs_MakeParam(h: 'Slvs_hParam', group: 'Slvs_hGroup', val: 'double') -> "Slvs_Param":
    return _slvs.Slvs_MakeParam(h, group, val)
Slvs_MakeParam = _slvs.Slvs_MakeParam

def Slvs_MakePoint2d(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', u: 'Slvs_hParam', v: 'Slvs_hParam') -> "Slvs_Entity":
    return _slvs.Slvs_MakePoint2d(h, group, wrkpl, u, v)
Slvs_MakePoint2d = _slvs.Slvs_MakePoint2d

def Slvs_MakePoint3d(h: 'Slvs_hEntity', group: 'Slvs_hGroup', x: 'Slvs_hParam', y: 'Slvs_hParam', z: 'Slvs_hParam') -> "Slvs_Entity":
    return _slvs.Slvs_MakePoint3d(h, group, x, y, z)
Slvs_MakePoint3d = _slvs.Slvs_MakePoint3d

def Slvs_MakeNormal3d(h: 'Slvs_hEntity', group: 'Slvs_hGroup', qw: 'Slvs_hParam', qx: 'Slvs_hParam', qy: 'Slvs_hParam', qz: 'Slvs_hParam') -> "Slvs_Entity":
    return _slvs.Slvs_MakeNormal3d(h, group, qw, qx, qy, qz)
Slvs_MakeNormal3d = _slvs.Slvs_MakeNormal3d

def Slvs_MakeNormal2d(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeNormal2d(h, group, wrkpl)
Slvs_MakeNormal2d = _slvs.Slvs_MakeNormal2d

def Slvs_MakeDistance(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', d: 'Slvs_hParam') -> "Slvs_Entity":
    return _slvs.Slvs_MakeDistance(h, group, wrkpl, d)
Slvs_MakeDistance = _slvs.Slvs_MakeDistance

def Slvs_MakeLineSegment(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', ptA: 'Slvs_hEntity', ptB: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeLineSegment(h, group, wrkpl, ptA, ptB)
Slvs_MakeLineSegment = _slvs.Slvs_MakeLineSegment

def Slvs_MakeCubic(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', pt0: 'Slvs_hEntity', pt1: 'Slvs_hEntity', pt2: 'Slvs_hEntity', pt3: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeCubic(h, group, wrkpl, pt0, pt1, pt2, pt3)
Slvs_MakeCubic = _slvs.Slvs_MakeCubic

def Slvs_MakeArcOfCircle(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', normal: 'Slvs_hEntity', center: 'Slvs_hEntity', start: 'Slvs_hEntity', end: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeArcOfCircle(h, group, wrkpl, normal, center, start, end)
Slvs_MakeArcOfCircle = _slvs.Slvs_MakeArcOfCircle

def Slvs_MakeCircle(h: 'Slvs_hEntity', group: 'Slvs_hGroup', wrkpl: 'Slvs_hEntity', center: 'Slvs_hEntity', normal: 'Slvs_hEntity', radius: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeCircle(h, group, wrkpl, center, normal, radius)
Slvs_MakeCircle = _slvs.Slvs_MakeCircle

def Slvs_MakeWorkplane(h: 'Slvs_hEntity', group: 'Slvs_hGroup', origin: 'Slvs_hEntity', normal: 'Slvs_hEntity') -> "Slvs_Entity":
    return _slvs.Slvs_MakeWorkplane(h, group, origin, normal)
Slvs_MakeWorkplane = _slvs.Slvs_MakeWorkplane

def Slvs_MakeConstraint(h: 'Slvs_hConstraint', group: 'Slvs_hGroup', type: 'int', wrkpl: 'Slvs_hEntity', valA: 'double', ptA: 'Slvs_hEntity', ptB: 'Slvs_hEntity', entityA: 'Slvs_hEntity', entityB: 'Slvs_hEntity', entityC: 'Slvs_hEntity', entityD: 'Slvs_hEntity', other: 'bool', other2: 'bool') -> "Slvs_Constraint":
    return _slvs.Slvs_MakeConstraint(h, group, type, wrkpl, valA, ptA, ptB, entityA, entityB, entityC, entityD, other, other2)
Slvs_MakeConstraint = _slvs.Slvs_MakeConstraint


import math

def mat_transpose(m):
    for i in range(4):
        for j in range(4):
            if i < j:
                a = m[i][j]
                b = m[j][i]
                m[i][j] = b
                m[j][i] = a

# call to_openscad(), if it exists
def _to_openscad(x):
    if hasattr(x, 'to_openscad'):
        return x.to_openscad()
    elif isinstance(x, list) or isinstance(x, tuple):
        return map(_to_openscad, x)
    else:
        return x

class Vector(object):
    __slots__ = "xs"

    def __init__(self, *args):
        args = _to_openscad(args)
        if len(args) == 1 and isinstance(args[0], Vector):
            self.xs = list(args[0].xs)
        elif len(args) == 1 and (isinstance(args[0], list) or isinstance(x, tuple)):
            self.xs = list(args[0])
        else:
            self.xs = list(args)

    def __add__(self, v):
        v = Vector(v)
        if len(self.xs) != len(v.xs):
            raise ValueError("vectors must have the same length (self: %d, other: %d)" % (len(self.xs), len(v.xs)))
        return Vector(map(lambda a,b: a+b, self.xs, v.xs))

    def __sub__(self, v):
        v = Vector(v)
        if len(self.xs) != len(v.xs):
            raise ValueError("vectors must have the same length (self: %d, other: %d)" % (len(self.xs), len(v.xs)))
        return Vector(map(lambda a,b: a-b, self.xs, v.xs))

    def __mul__(self, v):
        if not isinstance(v, (int, long, float)):
            raise ValueError("Vectors can only be scaled by a number. Use cross or dot to multiply vectors.")
        return Vector(map(lambda x: x*v, self.xs))

    def cross(self, v):
        v = Vector(v)
        if len(self.xs) != 3 or len(v.xs) != 3:
            raise ValueError("vectors must have length 3")
        a = self.xs
        b = v.xs
        c = [ a[1]*b[2] - a[2]*b[1],
              a[2]*b[0] - a[0]*b[2],
              a[0]*b[1] - a[1]*b[0] ]
        return Vector(c)

    def dot(self, v):
        v = Vector(v)
        if len(self.xs) != len(v.xs):
            raise ValueError("vectors must have the same length (self: %d, other: %d)" % (len(self.xs), len(v.xs)))
        return sum(map(lambda a,b: a*b, self.xs, v.xs))

    def length(self):
        return math.sqrt(sum(map(lambda x: x*x, self.xs)))

    def normalize(self, length = 1.0):
        l = self.length()
        return Vector(map(lambda x: x/l*length, self.xs))

    def to_openscad(self):
        return self.xs

    def __getitem__(self, i):
        return self.xs[i]

    def __setitem__(self, i, v):
        self.xs[i] = _to_openscad(v)

# Move and rotate an object using three points:
# - The origin will be moved into p1.
# - A point of the x axis will be moved into p2.
# - A point of the xy-plane will be moved into p3.
# In practice, this means: Build your object near the
# origin on the xy-plane. You determine the final
# position by deciding where the origin and x-axis
# should go, so both of them should have some
# significance. The xy-plane is also important, but
# usually this will be a flat surface, anyway (if you
# extrude from it).
def move_and_rotate(p1, p2, p3):
# get values from Param or Point
    origin = Vector(p1)
    p2     = Vector(p2)
    p3     = Vector(p3)

# calculate vectors from origin to p2 and p3
    v1 = p2 - origin
    v2 = p3 - origin

# make sure they have length 1.0
    v1 = v1.normalize()
    v2 = v2.normalize()

# third vector is perpendicular
    v3 = v1.cross(v2)

# we calculate the second vector again to make sure
# that v1 and v2 are perpendicular
    v2 = v3.cross(v1)

# The vectors are the base vectors of our object
# coordinate system, so we can put them into the
# rotation matrix.
    m = [ v1.xs  + [0],
          v2.xs  + [0],
          v3.xs  + [0],
          [0, 0, 0, 1] ]
# We have to transpose it.
    mat_transpose(m)

# add translation to origin
    m[0][3] = origin[0]
    m[1][3] = origin[1]
    m[2][3] = origin[2]

    return m

class Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param, name)
    __repr__ = _swig_repr

    def __init__(self, value: 'double'):
        this = _slvs.new_Param(value)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetHandle(self) -> "Slvs_hParam":
        return _slvs.Param_GetHandle(self)

    def GetGroup(self) -> "Slvs_hGroup":
        return _slvs.Param_GetGroup(self)

    def GetValue(self) -> "double":
        return _slvs.Param_GetValue(self)

    def SetValue(self, v: 'double') -> "void":
        return _slvs.Param_SetValue(self, v)

    __swig_getmethods__["handle"] = GetHandle
    if _newclass: handle = property(GetHandle)

    __swig_getmethods__["group"] = GetHandle
    if _newclass: group = property(GetGroup)

    __swig_getmethods__["value"] = GetValue
    __swig_setmethods__["value"] = SetValue
    if _newclass: value = property(GetValue, SetValue)


    def to_openscad(self):
        return self.value

    __swig_destroy__ = _slvs.delete_Param
    __del__ = lambda self: None
Param_swigregister = _slvs.Param_swigregister
Param_swigregister(Param)

class Entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Entity, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetHandle(self) -> "Slvs_hEntity":
        return _slvs.Entity_GetHandle(self)

    def GetGroup(self) -> "Slvs_hGroup":
        return _slvs.Entity_GetGroup(self)

    __swig_getmethods__["handle"] = GetHandle
    if _newclass: handle = property(GetHandle)

    __swig_getmethods__["group"] = GetHandle
    if _newclass: group = property(GetGroup)

    __swig_destroy__ = _slvs.delete_Entity
    __del__ = lambda self: None
Entity_swigregister = _slvs.Entity_swigregister
Entity_swigregister(Entity)

class Point(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _slvs.delete_Point
    __del__ = lambda self: None
Point_swigregister = _slvs.Point_swigregister
Point_swigregister(Point)

class Point3d(Point):
    __swig_setmethods__ = {}
    for _s in [Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Point3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def x(self) -> "Param":
        return _slvs.Point3d_x(self)

    def y(self) -> "Param":
        return _slvs.Point3d_y(self)

    def z(self) -> "Param":
        return _slvs.Point3d_z(self)

    def to_openscad(self):
        return [ self.x().value, self.y().value, self.z().value ]

    __swig_destroy__ = _slvs.delete_Point3d
    __del__ = lambda self: None
Point3d_swigregister = _slvs.Point3d_swigregister
Point3d_swigregister(Point3d)

class Normal3d(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Normal3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isNormalIn3D(self) -> "bool":
        return _slvs.Normal3d_isNormalIn3D(self)

    def qw(self) -> "Param":
        return _slvs.Normal3d_qw(self)

    def qx(self) -> "Param":
        return _slvs.Normal3d_qx(self)

    def qy(self) -> "Param":
        return _slvs.Normal3d_qy(self)

    def qz(self) -> "Param":
        return _slvs.Normal3d_qz(self)

    def isNormalIn2D(self) -> "bool":
        return _slvs.Normal3d_isNormalIn2D(self)

    def workplane(self) -> "Workplane":
        return _slvs.Normal3d_workplane(self)

    def vector(self):
        return [ self.qw().value, self.qx().value,
                 self.qy().value, self.qz().value ]

    # A normal is a quaternion in disguise, so we
    # transform it into a rotation. You can use it
    # with multmatrix.
    def to_openscad(self):
        q = self.vector()
        m = [ Slvs_QuaternionU(*q) + [0],
              Slvs_QuaternionV(*q) + [0],
              Slvs_QuaternionN(*q) + [0],
              [0, 0, 0, 1] ]
        mat_transpose(m)
        return m

    __swig_destroy__ = _slvs.delete_Normal3d
    __del__ = lambda self: None
Normal3d_swigregister = _slvs.Normal3d_swigregister
Normal3d_swigregister(Normal3d)

class Workplane(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Workplane, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Workplane, name)
    __repr__ = _swig_repr
    __swig_setmethods__["FreeIn3D"] = _slvs.Workplane_FreeIn3D_set
    __swig_getmethods__["FreeIn3D"] = _slvs.Workplane_FreeIn3D_get
    if _newclass:
        FreeIn3D = _swig_property(_slvs.Workplane_FreeIn3D_get, _slvs.Workplane_FreeIn3D_set)

    def __init__(self, *args):
        this = _slvs.new_Workplane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def origin(self) -> "Point3d":
        return _slvs.Workplane_origin(self)

    def normal(self) -> "Normal3d":
        return _slvs.Workplane_normal(self)

            # A workplane is transformed into the rotation
            # and translation that moves an object to the
            # plane and rotates it accordingly:
            # (0,0,0)   ->  origin of plane
            # xy-plane  ->  the plane
            # You can use the matrix with multmatrix.
    def to_openscad(self):
        m = self.normal().to_openscad()
        m[0][3] = self.origin().x().value
        m[1][3] = self.origin().y().value
        m[2][3] = self.origin().z().value
        return m

    __swig_destroy__ = _slvs.delete_Workplane
    __del__ = lambda self: None
Workplane_swigregister = _slvs.Workplane_swigregister
Workplane_swigregister(Workplane)
cvar = _slvs.cvar

class Point2d(Point):
    __swig_setmethods__ = {}
    for _s in [Point]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Point]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Point2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Point2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def u(self) -> "Param":
        return _slvs.Point2d_u(self)

    def v(self) -> "Param":
        return _slvs.Point2d_v(self)

    def workplane(self) -> "Workplane":
        return _slvs.Point2d_workplane(self)

    def to_openscad(self):
        return [ self.u().value, self.v().value ]

    __swig_destroy__ = _slvs.delete_Point2d
    __del__ = lambda self: None
Point2d_swigregister = _slvs.Point2d_swigregister
Point2d_swigregister(Point2d)

class LineSegment(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegment, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _slvs.delete_LineSegment
    __del__ = lambda self: None
LineSegment_swigregister = _slvs.LineSegment_swigregister
LineSegment_swigregister(LineSegment)

class LineSegment3d(LineSegment):
    __swig_setmethods__ = {}
    for _s in [LineSegment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegment3d, name, value)
    __swig_getmethods__ = {}
    for _s in [LineSegment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegment3d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_LineSegment3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def a(self) -> "Point3d":
        return _slvs.LineSegment3d_a(self)

    def b(self) -> "Point3d":
        return _slvs.LineSegment3d_b(self)
    __swig_destroy__ = _slvs.delete_LineSegment3d
    __del__ = lambda self: None
LineSegment3d_swigregister = _slvs.LineSegment3d_swigregister
LineSegment3d_swigregister(LineSegment3d)

class LineSegment2d(LineSegment):
    __swig_setmethods__ = {}
    for _s in [LineSegment]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineSegment2d, name, value)
    __swig_getmethods__ = {}
    for _s in [LineSegment]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LineSegment2d, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_LineSegment2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def a(self) -> "Point2d":
        return _slvs.LineSegment2d_a(self)

    def b(self) -> "Point2d":
        return _slvs.LineSegment2d_b(self)

    def workplane(self) -> "Workplane":
        return _slvs.LineSegment2d_workplane(self)
    __swig_destroy__ = _slvs.delete_LineSegment2d
    __del__ = lambda self: None
LineSegment2d_swigregister = _slvs.LineSegment2d_swigregister
LineSegment2d_swigregister(LineSegment2d)

class Circular(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circular, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circular, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _slvs.delete_Circular
    __del__ = lambda self: None
Circular_swigregister = _slvs.Circular_swigregister
Circular_swigregister(Circular)

class ArcOfCircle(Circular):
    __swig_setmethods__ = {}
    for _s in [Circular]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcOfCircle, name, value)
    __swig_getmethods__ = {}
    for _s in [Circular]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArcOfCircle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_ArcOfCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def center(self) -> "Point2d":
        return _slvs.ArcOfCircle_center(self)

    def start(self) -> "Point2d":
        return _slvs.ArcOfCircle_start(self)

    def end(self) -> "Point2d":
        return _slvs.ArcOfCircle_end(self)

    def normal(self) -> "Normal3d":
        return _slvs.ArcOfCircle_normal(self)

    def workplane(self) -> "Workplane":
        return _slvs.ArcOfCircle_workplane(self)
    __swig_destroy__ = _slvs.delete_ArcOfCircle
    __del__ = lambda self: None
ArcOfCircle_swigregister = _slvs.ArcOfCircle_swigregister
ArcOfCircle_swigregister(ArcOfCircle)

class Distance(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Distance, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Distance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Distance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def distance(self) -> "Param":
        return _slvs.Distance_distance(self)

    def workplane(self) -> "Workplane":
        return _slvs.Distance_workplane(self)
    __swig_destroy__ = _slvs.delete_Distance
    __del__ = lambda self: None
Distance_swigregister = _slvs.Distance_swigregister
Distance_swigregister(Distance)

class Circle(Circular):
    __swig_setmethods__ = {}
    for _s in [Circular]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Circle, name, value)
    __swig_getmethods__ = {}
    for _s in [Circular]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Circle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Circle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def center(self) -> "Point2d":
        return _slvs.Circle_center(self)

    def distance(self) -> "Distance":
        return _slvs.Circle_distance(self)

    def normal(self) -> "Normal3d":
        return _slvs.Circle_normal(self)

    def workplane(self) -> "Workplane":
        return _slvs.Circle_workplane(self)
    __swig_destroy__ = _slvs.delete_Circle
    __del__ = lambda self: None
Circle_swigregister = _slvs.Circle_swigregister
Circle_swigregister(Circle)

class Cubic(Entity):
    __swig_setmethods__ = {}
    for _s in [Entity]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic, name, value)
    __swig_getmethods__ = {}
    for _s in [Entity]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_Cubic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_Cubic
    __del__ = lambda self: None
Cubic_swigregister = _slvs.Cubic_swigregister
Cubic_swigregister(Cubic)

class Constraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetHandle(self) -> "Slvs_hEntity":
        return _slvs.Constraint_GetHandle(self)

    def system(self) -> "System *":
        return _slvs.Constraint_system(self)

    def GetGroup(self) -> "Slvs_hGroup":
        return _slvs.Constraint_GetGroup(self)

    def type(self) -> "int":
        return _slvs.Constraint_type(self)

    __swig_getmethods__["handle"] = GetHandle
    if _newclass: handle = property(GetHandle)

    __swig_getmethods__["group"] = GetHandle
    if _newclass: group = property(GetGroup)

    if _newclass:
        some_other_constraint = staticmethod(_slvs.Constraint_some_other_constraint)
    else:
        some_other_constraint = _slvs.Constraint_some_other_constraint
    if _newclass:
        distance = staticmethod(_slvs.Constraint_distance)
    else:
        distance = _slvs.Constraint_distance
    if _newclass:
        on = staticmethod(_slvs.Constraint_on)
    else:
        on = _slvs.Constraint_on
    if _newclass:
        horizontal = staticmethod(_slvs.Constraint_horizontal)
    else:
        horizontal = _slvs.Constraint_horizontal
    if _newclass:
        vertical = staticmethod(_slvs.Constraint_vertical)
    else:
        vertical = _slvs.Constraint_vertical
    if _newclass:
        diameter = staticmethod(_slvs.Constraint_diameter)
    else:
        diameter = _slvs.Constraint_diameter
    if _newclass:
        equal_radius = staticmethod(_slvs.Constraint_equal_radius)
    else:
        equal_radius = _slvs.Constraint_equal_radius
    if _newclass:
        equal = staticmethod(_slvs.Constraint_equal)
    else:
        equal = _slvs.Constraint_equal
    if _newclass:
        equal_point_line = staticmethod(_slvs.Constraint_equal_point_line)
    else:
        equal_point_line = _slvs.Constraint_equal_point_line
    if _newclass:
        equal_angle = staticmethod(_slvs.Constraint_equal_angle)
    else:
        equal_angle = _slvs.Constraint_equal_angle
    if _newclass:
        ratio = staticmethod(_slvs.Constraint_ratio)
    else:
        ratio = _slvs.Constraint_ratio
    if _newclass:
        symmetric = staticmethod(_slvs.Constraint_symmetric)
    else:
        symmetric = _slvs.Constraint_symmetric
    if _newclass:
        symmetric_H = staticmethod(_slvs.Constraint_symmetric_H)
    else:
        symmetric_H = _slvs.Constraint_symmetric_H
    if _newclass:
        symmetric_V = staticmethod(_slvs.Constraint_symmetric_V)
    else:
        symmetric_V = _slvs.Constraint_symmetric_V
    if _newclass:
        midpoint = staticmethod(_slvs.Constraint_midpoint)
    else:
        midpoint = _slvs.Constraint_midpoint
    if _newclass:
        orientation = staticmethod(_slvs.Constraint_orientation)
    else:
        orientation = _slvs.Constraint_orientation
    if _newclass:
        angle = staticmethod(_slvs.Constraint_angle)
    else:
        angle = _slvs.Constraint_angle
    if _newclass:
        perpendicular = staticmethod(_slvs.Constraint_perpendicular)
    else:
        perpendicular = _slvs.Constraint_perpendicular
    if _newclass:
        parallel = staticmethod(_slvs.Constraint_parallel)
    else:
        parallel = _slvs.Constraint_parallel
    if _newclass:
        distance_proj = staticmethod(_slvs.Constraint_distance_proj)
    else:
        distance_proj = _slvs.Constraint_distance_proj
    if _newclass:
        dragged = staticmethod(_slvs.Constraint_dragged)
    else:
        dragged = _slvs.Constraint_dragged
    if _newclass:
        tangent = staticmethod(_slvs.Constraint_tangent)
    else:
        tangent = _slvs.Constraint_tangent
    __swig_destroy__ = _slvs.delete_Constraint
    __del__ = lambda self: None
Constraint_swigregister = _slvs.Constraint_swigregister
Constraint_swigregister(Constraint)

def Constraint_some_other_constraint(*args) -> "Constraint":
    return _slvs.Constraint_some_other_constraint(*args)
Constraint_some_other_constraint = _slvs.Constraint_some_other_constraint

def Constraint_distance(*args) -> "Constraint":
    return _slvs.Constraint_distance(*args)
Constraint_distance = _slvs.Constraint_distance

def Constraint_on(*args) -> "Constraint":
    return _slvs.Constraint_on(*args)
Constraint_on = _slvs.Constraint_on

def Constraint_horizontal(*args) -> "Constraint":
    return _slvs.Constraint_horizontal(*args)
Constraint_horizontal = _slvs.Constraint_horizontal

def Constraint_vertical(*args) -> "Constraint":
    return _slvs.Constraint_vertical(*args)
Constraint_vertical = _slvs.Constraint_vertical

def Constraint_diameter(*args) -> "Constraint":
    return _slvs.Constraint_diameter(*args)
Constraint_diameter = _slvs.Constraint_diameter

def Constraint_equal_radius(*args) -> "Constraint":
    return _slvs.Constraint_equal_radius(*args)
Constraint_equal_radius = _slvs.Constraint_equal_radius

def Constraint_equal(*args) -> "Constraint":
    return _slvs.Constraint_equal(*args)
Constraint_equal = _slvs.Constraint_equal

def Constraint_equal_point_line(*args) -> "Constraint":
    return _slvs.Constraint_equal_point_line(*args)
Constraint_equal_point_line = _slvs.Constraint_equal_point_line

def Constraint_equal_angle(*args) -> "Constraint":
    return _slvs.Constraint_equal_angle(*args)
Constraint_equal_angle = _slvs.Constraint_equal_angle

def Constraint_ratio(*args) -> "Constraint":
    return _slvs.Constraint_ratio(*args)
Constraint_ratio = _slvs.Constraint_ratio

def Constraint_symmetric(*args) -> "Constraint":
    return _slvs.Constraint_symmetric(*args)
Constraint_symmetric = _slvs.Constraint_symmetric

def Constraint_symmetric_H(*args) -> "Constraint":
    return _slvs.Constraint_symmetric_H(*args)
Constraint_symmetric_H = _slvs.Constraint_symmetric_H

def Constraint_symmetric_V(*args) -> "Constraint":
    return _slvs.Constraint_symmetric_V(*args)
Constraint_symmetric_V = _slvs.Constraint_symmetric_V

def Constraint_midpoint(*args) -> "Constraint":
    return _slvs.Constraint_midpoint(*args)
Constraint_midpoint = _slvs.Constraint_midpoint

def Constraint_orientation(*args) -> "Constraint":
    return _slvs.Constraint_orientation(*args)
Constraint_orientation = _slvs.Constraint_orientation

def Constraint_angle(*args) -> "Constraint":
    return _slvs.Constraint_angle(*args)
Constraint_angle = _slvs.Constraint_angle

def Constraint_perpendicular(*args) -> "Constraint":
    return _slvs.Constraint_perpendicular(*args)
Constraint_perpendicular = _slvs.Constraint_perpendicular

def Constraint_parallel(*args) -> "Constraint":
    return _slvs.Constraint_parallel(*args)
Constraint_parallel = _slvs.Constraint_parallel

def Constraint_distance_proj(*args) -> "Constraint":
    return _slvs.Constraint_distance_proj(*args)
Constraint_distance_proj = _slvs.Constraint_distance_proj

def Constraint_dragged(*args) -> "Constraint":
    return _slvs.Constraint_dragged(*args)
Constraint_dragged = _slvs.Constraint_dragged

def Constraint_tangent(*args) -> "Constraint":
    return _slvs.Constraint_tangent(*args)
Constraint_tangent = _slvs.Constraint_tangent

class System(Slvs_System):
    __swig_setmethods__ = {}
    for _s in [Slvs_System]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    for _s in [Slvs_System]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _slvs.new_System(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _slvs.delete_System
    __del__ = lambda self: None
    __swig_setmethods__["default_group"] = _slvs.System_default_group_set
    __swig_getmethods__["default_group"] = _slvs.System_default_group_get
    if _newclass:
        default_group = _swig_property(_slvs.System_default_group_get, _slvs.System_default_group_set)

    def add_param(self, *args) -> "Param":
        return _slvs.System_add_param(self, *args)

    def add_entity(self, p: 'Slvs_Entity') -> "void":
        return _slvs.System_add_entity(self, p)

    def add_entity_with_next_handle(self, p: 'Slvs_Entity') -> "Entity":
        return _slvs.System_add_entity_with_next_handle(self, p)

    def add_constraint(self, p: 'Slvs_Constraint') -> "void":
        return _slvs.System_add_constraint(self, p)

    def get_param(self, i: 'int') -> "Slvs_Param *":
        return _slvs.System_get_param(self, i)

    def set_dragged(self, *args) -> "void":
        return _slvs.System_set_dragged(self, *args)

    __swig_setmethods__["dragged"] = set_dragged
    if _newclass: value = property(None, set_dragged)


    def solve(self, hg: 'Slvs_hGroup'=0) -> "int":
        return _slvs.System_solve(self, hg)

    def add_point2d(self, workplane: 'Workplane', u: 'Param', v: 'Param', group: 'Slvs_hGroup'=0) -> "Point2d":
        return _slvs.System_add_point2d(self, workplane, u, v, group)

    def add_point3d(self, x: 'Param', y: 'Param', z: 'Param', group: 'Slvs_hGroup'=0) -> "Point3d":
        return _slvs.System_add_point3d(self, x, y, z, group)

    def entity_type(self, i: 'int') -> "int":
        return _slvs.System_entity_type(self, i)

    def get_Point2d(self, i: 'int') -> "Point2d":
        return _slvs.System_get_Point2d(self, i)

    def get_Point3d(self, i: 'int') -> "Point3d":
        return _slvs.System_get_Point3d(self, i)

    def get_LineSegment2d(self, i: 'int') -> "LineSegment2d":
        return _slvs.System_get_LineSegment2d(self, i)

    def get_LineSegment3d(self, i: 'int') -> "LineSegment3d":
        return _slvs.System_get_LineSegment3d(self, i)

    def get_Normal3d(self, i: 'int') -> "Normal3d":
        return _slvs.System_get_Normal3d(self, i)

    def get_Distance(self, i: 'int') -> "Distance":
        return _slvs.System_get_Distance(self, i)

    def get_Workplane(self, i: 'int') -> "Workplane":
        return _slvs.System_get_Workplane(self, i)

    def get_Cubic(self, i: 'int') -> "Cubic":
        return _slvs.System_get_Cubic(self, i)

    def get_Circle(self, i: 'int') -> "Circle":
        return _slvs.System_get_Circle(self, i)

    def get_ArcOfCircle(self, i: 'int') -> "ArcOfCircle":
        return _slvs.System_get_ArcOfCircle(self, i)
System_swigregister = _slvs.System_swigregister
System_swigregister(System)

# This file is compatible with both classic and new-style classes.


